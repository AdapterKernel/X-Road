plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

sourceSets {
    main {
        java.srcDirs = ["src/main/java", "$buildDir/generated-sources"]
        resources.srcDirs = ['src/main/resources', '../../../common-util/src/main/resources']
    }
}

configurations {
    xjc
}
dependencies {
    compile project(':common-util')
    compile project(':proxy')
    compile project(':monitor-common')
    compile project(':addons:proxymonitor:common')
    compile 'com.google.guava:guava:19.0'
    xjc 'org.glassfish.jaxb:jaxb-xjc:2.2.11'
    xjc 'org.glassfish.jaxb:jaxb-runtime:2.2.11'
}

task createDirs() {
    project.ext.schemaTargetDir.mkdirs()
}

task xjc {
    println '---- monitoring xjc @ configuration phase'
    doLast {
        println '---- monitoring xjc @ execution phase'
        ant.taskdef(name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.xjc.asPath)
        ant.xjc(
                destdir: project.ext.schemaTargetDir,
                package: 'ee.ria.xroad.common.conf.globalconf.monitoringparameters',
                schema: 'build/resources/main/monitoring-conf.xsd',
                binding: 'build/resources/main/identifiers-bindings.xml'
        )

    }
}

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

xjc.dependsOn createDirs
xjc.dependsOn processResources
xjc.mustRunAfter processResources

jar {
    enabled = false
}

shadowJar {
    baseName = "proxymonitor-metaservice"
    classifier = ''
    dependencies {
        include(project(':addons:proxymonitor:common'))
        include(project(':monitor-common'))
    }
}

build.dependsOn shadowJar
buildall.dependsOn shadowJar

compileJava.dependsOn xjc
compileJava.dependsOn processResources

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}
