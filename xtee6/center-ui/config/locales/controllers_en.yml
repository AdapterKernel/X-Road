en:
  menu:
    configuration:
      title: "Configuration"
      tsp: "Time Stamping Services"
      approved_ca: "Certification Services"
      org: "Members"
      group: "Groups"
      member: "Members"
      securityserver: "Security Servers"
      central_service: "Central Services"
    management:
      title: "Management"
      request: "Management Requests"
      configuration_management: "Configuration Management"
      system_settings: "System Settings"
      import_v5: "Import X-Road 5.0 Data"
      distributed_file: "Distributed Files"
    help:
      title: "Help"
      version: "Version"

  common:
    db_error: "Cannot connect to database server"

  about:
    action:
      index: "display application version"

  application:
    action:
      member_classes: "get member classes"
      set_locale: "set application locale"

  init:
    not_authorized: "Fatal system error - contact system administrator"
    already_initialized: "Central Server already initialized"
    mismatching_pins: "Software token pins do not match"
    init_params:
      central_server_address:
        host: "Central server address must be DNS name or IP address"

  approved_cas:
    action:
      index: "display approved CAs page"
      get_cert_details_by_id: "get approved CA temp cert details by id"
      get_records_count: "get approved CA records count"
      can_see_details: "verify visibility of approved CA details"
      refresh: "refresh approved CAs table"
      get_intermediate_ca_temp_cert_details: "get approved CA intermediate CA temp cert details"
      get_existing_intermediate_ca_cert_details: "get existing intermediate CA cert details"
      get_existing_intermediate_ca_cert_dump_and_hash: "get existing intermediate CA cert dump and hash"
      get_top_ca_cert_details: "get top CA cert details"
      get_top_ca_cert_dump_and_hash: "get top CA cert dump and hash"
      get_name_extractor_data: "get top CA name extractor data"
      get_ocsp_infos: "get OCSP infos"
      get_existing_ocsp_cert_details: "get existing OCSP cert details"
      get_intermediate_cas: "get intermediate CAs"
      upload_top_ca_cert: "upload top CA cert"
      upload_ocsp_responder_cert: "upload OCSP responder cert"
      upload_intermediate_ca_cert: "upload intermediate CA cert"
      save_new_approved_ca: "save new approved CA"
      edit_existing_approved_ca: "edit existing approved CA"
      delete_approved_ca: "delete approved CA"
    approved_ca_added: "Certification service added successfully"
    intermediate_ca_added: "Intermediate CA added successfully"
    no_name_extractor: "Name extractor method must be provided for approved_ca used for signing"
    ca_settings_saved: "CA settings saved"

  orgs:
    name_exists: "This registry code (short name) is already in use"
    fullname_exists: "This name is already in use"
    delete_success: "X-Road member removed"
    org_type_error: "Unknown X-Road member type"
    name_error: "Cannot read the registry code (short name) of '{{org}}'"
    fullname_error: "Cannot read the name of '{{org}}'"
    invalid_name: "Database name must not start with number"
    card_not_available: "Required smart card ({{serial}}) not available"

  validation:
    member_exists: "Member with class '%{member_class}' and code '%{member_code}' already exists"
    securitserver_exists: "Security server with server code '%{server_code}', and with owner (member code: '%{member_code}' and member class code: '%{member_class}') already exists"
    invalid_uri: "Invalid URI '%{uri}' for attribute '%{attribute}'"
    already_exists: "Attribute '%{attribute}' with value '%{value}' already exists"

  central_services:
    action:
      index: "display central services page"
      get_records_count: "get central service records count"
      can_see_details: "verify visibility of central service details"
      services_refresh: "refresh central services table"
      search_providers: "search central service providers"
      save_service: "save central service"
      update_service: "update central service"
      delete_service: "delete central service"
      delete_target_service: "delete target service"
    provider_not_found: "Provider with ID '%{provider_id}' not found"
    add:
      provider_not_found: "Provider not found"
      provider_with_no_service_code: "Cannot save central service without code"

  identifiers:
    service_code_empty: "Service code must not be blank"

  groups:
    action:
      group_add: "add global group"
      index: "display global groups page"
      get_records_count: "get global group records count"
      can_see_details: "verify visibility of global group details"
      global_groups_refresh: "refresh global groups table"
      group_members: "get global group members"
      addable_members: "get addable global group members"
      xroad_instance_codes: "get X-Road instance codes"
      types: "get distinct object types"
      get_member_count: "get global group member count"
      find_by_id: "get global group by id"
      group_add: "add global group"
      group_edit_description: "edit global group description"
      delete_group: "delete global group"
      remove_selected_members: "remove selected members from global group"
      add_members_to_group: "add members to global group"
    delete: "Group deleted successfully"
    description_blank: "Global group description must not be blank."
    change_description: "Description changed successfully"
    delete_all_members: "All members removed successfully"
    delete_selected_members: "Selected members removed successfully"

  members:
    action:
      get_records_count: "get members records count"
      can_see_details: "verify visibility of member details"
      members_refresh: "refresh members table"
      owned_servers: "get owned servers"
      global_groups: "get global groups"
      subsystems: "get subsystems"
      used_servers: "get used servers"
      management_requests: "get management requests"
      remaining_global_groups: "get remaining global groups"
      get_member_by_id: "get member by ID"
      subsystem_codes: "get subsystem codes"
      member_add: "add member"
      member_edit: "edit member"
      delete: "delete member"
      delete_subsystem: "delete subsystem"
      import_auth_cert: "import authentication certificate"
      add_new_owned_server_request: "add new owned server request"
      add_new_server_client_request: "add new server client request"
      delete_server_client_request: "delete server client request"
      add_member_to_global_group: "add member to global group"
      delete_member_from_global_group: "delete member from global group"

    added: "Successfully added X-Road member with member class '%{member_class}' and member code '%{member_code}'."
    server_already_exists: "Server with owner class '%{member_class}', owner code '%{member_code}' and server code '%{server_code}' already exists."
    server_code_blank: "Server code cannot be blank!"
    auth_cert_request_added: "Request of adding authentication certificate to new security server '%{security_server}' added successfully"
    client_add_request_added: "Request of adding client '%{client_id}' to security server '%{server_id}' added successfully"
    client_deletion_request_added: "Request of deleting client '%{client_id}' from security server '%{server_id}' added successfully"
    member_added_to_global_group: "Member '%{member_code}' successfully added to global group '%{group_code}'"
    member_deleted_from_global_group: "Member '%{member_code}' successfully deleted from global group '%{group_code}'"

  securityservers:
    action:
      index: "display security servers page"
      get_records_count: "get security servers records count"
      can_see_details: "verify visibility of security server details"
      get_cert_details_by_id: "get certificate details by ID"
      securityservers_refresh: "refresh security servers table"
      server_security_categories: "get security server security categories"
      all_security_categories: "get all security categories"
      clients: "get security server clients"
      auth_certs: "get security server authentication certificates"
      management_requests: "get security server management requests"
      get_server_by_id: "get security server by id"
      addable_clients: "get addable clients"
      address_edit: "edit security server address"
      edit_security_categories: "edit security categories"
      delete: "delete security server"
      import_auth_cert: "import authentication certificate"
      auth_cert_adding_request: "add authehtication certificate adding request"
      auth_cert_deletion_request: "add authentication certificate deletion request"
    add_auth_cert_adding_request: "Request of adding authentication certificate to existing security server '%{security_server}' added successfully"
    add_auth_cert_deletion_request: "Request of deleting authentication certificate from security server '%{security_server_id}' added successfully"

  system_status:
    action:
      index: "display system status page"
      check_status: "check system status"
      enter_signing_token_pin: "enter signing token PIN"

  requests:
    action:
      index: "display management requests page"
      get_records_count: "get management requests records count"
      can_see_details: "verify visibility of management request details"
      requests_refresh: "refresh management requests table"
      get_additional_request_data: "get additional request data"
      get_auth_cert_reg_request_data: "get authetification certificate registration request data"
      get_client_reg_request_data: "get client registration request data"
      get_auth_cert_deletion_request_data: "get authentication certificate deletion request data"
      get_client_deletion_request_data: "get client deletion request data"
      revoke_client_reg_request: "revoke client registration request"
      revoke_auth_cert_reg_request: "revoke authentication certificate registration request"
      approve_reg_request: "approve registration request"
      decline_reg_request: "decline registration request"
    client_reg_request_revoked: "Successfully revoked client registration request with id '%{id}'"
    auth_cert_reg_request_revoked: "Successfully revoked authentication request with id '%{id}'"
    request_approved: "Successfully approved request with id '%{id}'"
    request_declined: "Successfully declined request with id '%{id}'"

  import:
    action:
      index: "display import page"
      get_imported: "get imported file"
      last_result: "get last import console output"
      import_v5_data: "import V5 data"
    no_file: "No file found."
    file: "'%{file}' uploaded at %{time}"
    label: "5.0 DATA"
    execute:
      success: "Import successful"
      warnings: "Import succeeded with some warnings, click 'Last result' for details."
      failure: "Importer finished unsuccessfully, click 'Last result' for details."
      other_error: "Import failed, check if importer is installed properly"

  status:
    global_conf_gen:
      no_status_file: "No global configuration generation status file present, make sure that center-service is up and running"
      out_of_date: "Global configuration is out of date, last generation attempt: '%{time}', make sure if center-service is up and running"
      failure: "Global configuration generation failing since '%{time}'"
    signing_key:
      signer_error: "Invocation of signer client failed: %{message}"
      internal:
        missing: "Signing of internal configuration failed - active key missing"
        token_not_found: "Signing of internal configuration failed - active key not found"
        token_not_active: "Signing of internal configuration failed - PIN of active key not entered"
        key_not_available: "Signing of internal configuration failed - active key not available"
      external:
        missing: "Signing of external configuration failed - active key missing"
        token_not_found: "Signing of external configuration failed - active key not found"
        token_not_active: "Signing of external configuration failed - PIN of active key not entered"
        key_not_available: "Signing of external configuration failed - active key not available"

  configuration_management:
    action:
      index: "display configuration management page"
      source: "display configuration source"
      download_source_anchor: "download source anchor"
      available_tokens: "get available tokens"
      download_conf_part: "download configuration part"
      trusted_anchors: "display trusted anchors"
      download_trusted_anchor: "download trusted anchor"
      upload_trusted_anchor: "upload trusted anchor"
      save_uploaded_trusted_anchor: "save uploaded trusted anchor"
      clear_uploaded_trusted_anchor: "clear uploaded trusted anchor"
      delete_trusted_anchor: "delete trusted anchor"
      generate_source_anchor: "generate source anchor"
      generate_signing_key: "generate signing key"
      activate_signing_key: "activate signing key"
      delete_signing_key: "delete key from central server configuration"
      logout_token: "logout signing token"
      upload_conf_part: "upload configuration part"
    sources:
      internal_anchor_generated: "Internal configuration anchor generated successfully"
      internal_anchor_error: "Internal configuration anchor generation failed: %{reason}"
      external_anchor_generated: "External configuration anchor generated successfully"
      external_anchor_error: "External configuration anchor generation failed: %{reason}"
      token_or_key_not_available: "token or key not available"
      deleting_key_from_token_failed: "Failed to delete key from token '%{token}': %{reason}"
      deleting_key_from_token_success: "Key successfully deleted from token '%{token}'"
      deleting_key_from_conf_success: "Key successfully deleted from central server configuration"
      conf_part_upload:
        successful: "Configuration file for content identifier '%{content_identifier}' uploaded successfully."
        warnings: "Configuration file for content identifier '%{content_identifier}' uploaded with some warnings."
        error: "Validation of configuration file with content identifier '%{content_identifier}' failed."
        program_ended: "Validation program '%{program}' ended prematurely, make sure if it does the right thing."
        io_error: "IO error occurred when running validation program '%{program}', message: '%{message}'"
        no_program: "Validation program '%{program}' does not exist in the file system."
    trusted_anchors:
      upload_successful: "Configuration anchor for instance '%{instance}' uploaded successfully."
      delete_successful: "Configuration anchor of instance '%{instance}' deleted successfully."
      upload_info:
        instance: "Instance identifier: %{instance}"
        generated: "Anchor generated: %{generated}"
        hash: "Anchor hash (%{alg}): %{hash}"
      error:
        same_instance: "Anchors originating from this instance are not supported as trusted anchors."
        anchor_malformed: "Incorrect file structure."

  tsps:
    action:
      index: "display approved TSAs page"
      get_records_count: "get approved TSAs records count"
      can_see_details: "verify visibility of approved TSA details"
      get_cert_details_by_id: "get certificate details by ID"
      tsps_refresh: "refresh approved TSAs table"
      get_existing_tsp_cert_details: "get existing TSA certificate details"
      get_existing_tsp_cert_dump_and_hash: "get existing TSA certificate dump and hash"
      save_new_tsp: "save new approved TSA"
      edit_existing_tsp: "edit existing approved TSA"
      delete_tsp: "delete approved TSA"
      upload_tsp_cert: "upload approved TSA certificate"

  system_settings:
    member_class_already_exists: "Member class with the same code already exists"
    member_class_has_members: "Cannot delete member class %{code}: found X-Road members belonging to the class. Only classes with no registered members can be deleted."
    central_server_address_edit_params:
      centralServerAddress:
        host: "Central server address must be DNS name or IP address"
