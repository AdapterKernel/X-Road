project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

dependencies {
    compile 'org.apache.james:apache-mime4j-core:0.7.2'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'org.apache.santuario:xmlsec:1.5.8'

    compile 'org.bouncycastle:bcpkix-jdk15on:1.52'
    compile 'commons-configuration:commons-configuration:1.9'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-jxpath:commons-jxpath:1.3'
    compile 'com.sun.xml.bind:jaxb-impl:2.2.7'
    compile 'org.slf4j:jcl-over-slf4j:1.6.6'

    compile 'org.eclipse.jetty:jetty-server:8.1.18.v20150929'
    compile 'org.eclipse.jetty:jetty-continuation:8.1.18.v20150929'
    compile 'org.eclipse.jetty:jetty-io:8.1.18.v20150929'
    compile 'org.eclipse.jetty:jetty-xml:8.1.18.v20150929'

    compile 'ch.qos.logback:logback-access:1.1.3'
    compile 'ch.qos.logback:logback-classic:1.1.3'

    compile ('org.quartz-scheduler:quartz:2.1.6') {
        exclude module: 'c3p0'
    }

    compile 'joda-time:joda-time:2.1'
    compile 'xalan:serializer:2.7.2'

    compile 'org.apache.httpcomponents:httpasyncclient:4.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.1'
    compile 'org.apache.httpcomponents:httpcore:4.4.3'

    compile 'com.typesafe.akka:akka-actor_2.11:2.4.1'
    compile 'com.typesafe.akka:akka-remote_2.11:2.4.1'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.5'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.google.guava:guava:18.0'

    testCompile 'org.mockito:mockito-core:1.10.19'

    xjc 'com.sun.xml.bind:jaxb-impl:2.2.7'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.7'
}

test {
    jvmArgs '-Djava.library.path=../lib'
}

task createDirs() {
    project.ext.schemaTargetDir.mkdirs()
}

task xjc() {
    ant.taskdef(name: 'xjc',
        classname: 'com.sun.tools.xjc.XJCTask',
        classpath: configurations.xjc.asPath)

    // Generate classes for identifiers
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.identifier',
        schema: 'src/main/resources/identifiers.xsd'
    )

    // Generate classes for message, using identifier classes
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.message',
        schema: 'src/main/resources/message.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for federateable global external conf
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.conf.globalconf.sharedparameters',
        schema: 'src/main/resources/globalconf/external-conf.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for federateable global internal conf
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.conf.globalconf.privateparameters',
        schema: 'src/main/resources/globalconf/internal-conf.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for request, using identifier classes
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.request',
        schema: 'src/main/resources/request.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )

    // Generate classes for hash chains
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.hashchain',
        schema: 'src/main/resources/hashchain.xsd',
    )

    // Generate classes for service metainfo
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.metadata',
        schema: 'src/main/resources/service-metainfo.xsd',
        binding: 'src/main/resources/identifiers-bindings.xml'
    )
}

task make(type: Exec) {
    workingDir '../'
    commandLine 'make'
}

task makeClean(type: Exec) {
    workingDir '../'
    commandLine 'make', 'clean'
}

licenseFormatTest {
    outputs.upToDateWhen { false }
}

classes.dependsOn make
clean.dependsOn makeClean

xjc.dependsOn createDirs
compileJava.dependsOn xjc

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}

