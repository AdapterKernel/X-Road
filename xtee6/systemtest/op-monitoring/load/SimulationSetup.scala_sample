// The MIT License
// Copyright (c) 2016 Estonian Information System Authority (RIA), Population Register Centre (VRK)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package opmonitor.loadtesting;

import io.gatling.core.Predef._ 
import io.gatling.core.structure.PopulationBuilder
import scala.concurrent.duration._

// The sample simulation setup for the load tests of operational monitoring.
// Copy the contents of this file to SimulationSetup.scala.
// NOTE! The contents of SimulationSetup.scala will be overwritten by the wrapper script if
// the environment variable SIMULATION_SETUP has been set.
object SimulationSetup {

  val Scenarios = List[PopulationBuilder] (

    SimulationScenarios.SimpleRequestScenario.inject(
      constantUsersPerSec(1) during(10 seconds)
    //  constantUsersPerSec(5) during(30 seconds),
    //  constantUsersPerSec(15) during(30 seconds),
    //  constantUsersPerSec(20) during(300 seconds)
    ),

    //SimulationScenarios.RequestWith1MbBodyScenario.inject(
    //  constantUsersPerSec(1) during(300 seconds)
    //),

    SimulationScenarios.RequestWithAttachmentScenario.inject(
      constantUsersPerSec(1) during(10 seconds)
    )
  )

}
