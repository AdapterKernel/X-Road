<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Mock Service for Operational Monitoring" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" id="4c7d99e5-f028-4226-9d36-0d7f6a2b1d9d" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="xroadBinding" type="wsdl" bindingName="{http://producer.x-road.eu}xroadBinding" soapVersion="1_1" anonymous="optional" definition="http://xtee2:8088/operational_monitoring_mock_service/mockService?WSDL" id="dd55bf10-760c-4f11-bfae-e6d1d4420b6b" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://xtee2:8088/operational_monitoring_mock_service/mockService?WSDL"><con:part><con:url>http://xtee2:8088/operational_monitoring_mock_service/mockService?WSDL</con:url><con:content><![CDATA[<wsdl:definitions name="xroadGetRandom" targetNamespace="http://producer.x-road.eu" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xrd="http://x-road.ee/xsd/x-road.xsd" xmlns:tns="http://producer.x-road.eu" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:swi="http://ws-i.org/profiles/basic/1.1/xsd">
  <wsdl:types>
    <!--Schema for identifiers (reduced)-->
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://x-road.eu/xsd/identifiers" xmlns="http://x-road.eu/xsd/identifiers">
      <xsd:complexType name="XRoadIdentifierType">
        <xsd:annotation>
          <xsd:documentation>Globally unique identifier in the
                        X-Road 6.0 system. Identifier consists of object type
                        specifier and list of hierarchical codes
                        (starting with code that identifiers the X-Road 6.0
                        instance).</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element minOccurs="0" ref="xRoadInstance"/>
          <xsd:element minOccurs="0" ref="memberClass"/>
          <xsd:element minOccurs="0" ref="memberCode"/>
          <xsd:element minOccurs="0" ref="subsystemCode"/>
          <xsd:element minOccurs="0" ref="serverCode"/>
          <xsd:element minOccurs="0" ref="serviceCode"/>
          <xsd:element minOccurs="0" ref="serviceVersion"/>
        </xsd:sequence>
        <xsd:attribute ref="objectType" use="required"/>
      </xsd:complexType>
      <xsd:simpleType name="XRoadObjectType">
        <xsd:annotation>
          <xsd:documentation>Enumeration for X-Road 6.0 identifier
                        types that can be used in requests.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="MEMBER"/>
          <xsd:enumeration value="SUBSYSTEM"/>
          <xsd:enumeration value="SERVER"/>
          <xsd:enumeration value="SERVICE"/>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:element name="xRoadInstance" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Identifies the X-Road 6.0 instance.
                        This field is applicable to all identifier
                        types.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="memberClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Type of the member (company,
                        government institution, private person, etc.)</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="memberCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Code that uniquely identifies a
                        member of given member type.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="subsystemCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Code that uniquely identifies a
                        subsystem of given X-Road 6.0 member.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="serviceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Code that uniquely identifies a
                        service offered by given X-Road 6.0 member or
                        subsystem.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="serviceVersion" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Version of the service.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="serverCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Code that uniquely identifies
                        security server offered by a given X-Road 6.0 member
                        or subsystem.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:attribute name="objectType" type="XRoadObjectType"/>
      <xsd:complexType name="XRoadClientIdentifierType">
        <xsd:complexContent>
          <xsd:restriction base="XRoadIdentifierType">
            <xsd:sequence>
              <xsd:element ref="xRoadInstance"/>
              <xsd:element ref="memberClass"/>
              <xsd:element ref="memberCode"/>
              <xsd:element minOccurs="0" ref="subsystemCode"/>
            </xsd:sequence>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="XRoadServiceIdentifierType">
        <xsd:complexContent>
          <xsd:restriction base="XRoadIdentifierType">
            <xsd:sequence>
              <xsd:element ref="xRoadInstance"/>
              <xsd:element ref="memberClass"/>
              <xsd:element ref="memberCode"/>
              <xsd:element minOccurs="0" ref="subsystemCode"/>
              <xsd:element ref="serviceCode"/>
              <xsd:element minOccurs="0" ref="serviceVersion"/>
            </xsd:sequence>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="XRoadSecurityServerIdentifierType">
        <xsd:complexContent>
          <xsd:restriction base="XRoadIdentifierType">
            <xsd:sequence>
              <xsd:element ref="xRoadInstance"/>
              <xsd:element ref="memberClass"/>
              <xsd:element ref="memberCode"/>
              <xsd:element ref="serverCode"/>
            </xsd:sequence>
          </xsd:restriction>
        </xsd:complexContent>
      </xsd:complexType>
    </xsd:schema>
    <!--Testservice-specific Schema-->
    <xsd:schema targetNamespace="http://x-road.eu/xsd/xroad.xsd" elementFormDefault="qualified" xmlns="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers">
      <xsd:import namespace="http://x-road.eu/xsd/identifiers" id="id"/>
      <!--Header fields-->
      <xsd:element name="client" type="id:XRoadClientIdentifierType"/>
      <xsd:element name="service" type="id:XRoadServiceIdentifierType"/>
      <xsd:element name="userId" type="xsd:string"/>
      <xsd:element name="id" type="xsd:string"/>
      <xsd:element name="protocolVersion" type="xsd:string"/>
      <xsd:element name="xroadGetRandom">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="request">
              <xsd:complexType>
                <xsd:sequence>
                  <xsd:element name="seed" type="xsd:decimal">
                    <xsd:annotation>
                      <xsd:appinfo>
                        <xrd:title>Random input</xrd:title>
                      </xsd:appinfo>
                    </xsd:annotation>
                  </xsd:element>
                  <xsd:element name="XXX" type="swi:swaRef"/>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="xroadGetRandomResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="response">
              <xsd:complexType>
                <xsd:sequence>
                  <xsd:element name="content" type="xsd:decimal">
                    <xsd:annotation>
                      <xsd:appinfo>
                        <xrd:title>Random
                                                    response</xrd:title>
                      </xsd:appinfo>
                    </xsd:annotation>
                  </xsd:element>
                  <xsd:element name="XXX" type="swi:swaRef"/>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="bodyMassIndex">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="request">
              <xsd:complexType>
                <xsd:sequence>
                  <xsd:element name="height" type="xsd:decimal">
                    <xsd:annotation>
                      <xsd:appinfo>
                        <xrd:title>Height in cm</xrd:title>
                      </xsd:appinfo>
                    </xsd:annotation>
                  </xsd:element>
                  <xsd:element name="weight" type="xsd:decimal">
                    <xsd:annotation>
                      <xsd:appinfo>
                        <xrd:title>Weight in kg</xrd:title>
                      </xsd:appinfo>
                    </xsd:annotation>
                  </xsd:element>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="bodyMassIndexResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="response">
              <xsd:complexType>
                <xsd:sequence>
                  <xsd:element name="bodyMassIndex" type="xsd:decimal">
                    <xsd:annotation>
                      <xsd:appinfo>
                        <xrd:title>Body mass
                                                    index response</xrd:title>
                      </xsd:appinfo>
                    </xsd:annotation>
                  </xsd:element>
                </xsd:sequence>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="requestheader">
    <wsdl:part name="client" element="xroad:client"/>
    <wsdl:part name="service" element="xroad:service"/>
    <wsdl:part name="userId" element="xroad:userId"/>
    <wsdl:part name="id" element="xroad:id"/>
    <wsdl:part name="protocolVersion" element="xroad:protocolVersion"/>
  </wsdl:message>
  <wsdl:message name="xroadGetRandom">
    <wsdl:part name="body" element="xroad:xroadGetRandom"/>
  </wsdl:message>
  <wsdl:message name="xroadGetRandomResponse">
    <wsdl:part name="body" element="xroad:xroadGetRandomResponse"/>
  </wsdl:message>
  <wsdl:message name="bodyMassIndex">
    <wsdl:part name="body" element="xroad:bodyMassIndex"/>
  </wsdl:message>
  <wsdl:message name="bodyMassIndexResponse">
    <wsdl:part name="body" element="xroad:bodyMassIndexResponse"/>
  </wsdl:message>
  <wsdl:portType name="xroadPortType">
    <wsdl:operation name="xroadGetRandom">
      <wsdl:documentation>
        <xrd:title>Suvaline sisend document/literal stiilis</xrd:title>
        <xrd:notes>Suvalisele sisendile tuleb ka suvaline
                    vastus.</xrd:notes>
      </wsdl:documentation>
      <wsdl:input message="tns:xroadGetRandom"/>
      <wsdl:output message="tns:xroadGetRandomResponse"/>
    </wsdl:operation>
    <wsdl:operation name="bodyMassIndex">
      <wsdl:documentation>
        <xrd:title>Arvutatakse välja kehamassiindeks</xrd:title>
        <xrd:notes>Sisenditeks pikkus (cm) ja kaal (kg).</xrd:notes>
      </wsdl:documentation>
      <wsdl:input message="tns:bodyMassIndex"/>
      <wsdl:output message="tns:bodyMassIndexResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="xroadBinding" type="tns:xroadPortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="xroadGetRandom">
      <soap:operation soapAction="" style="document"/>
      <xrd:version>v1</xrd:version>
      <wsdl:input>
        <soap:body use="literal"/>
        <soap:header message="tns:requestheader" part="client" use="literal"/>
        <soap:header message="tns:requestheader" part="service" use="literal"/>
        <soap:header message="tns:requestheader" part="userId" use="literal"/>
        <soap:header message="tns:requestheader" part="id" use="literal"/>
        <soap:header message="tns:requestheader" part="protocolVersion" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
        <soap:header message="tns:requestheader" part="client" use="literal"/>
        <soap:header message="tns:requestheader" part="service" use="literal"/>
        <soap:header message="tns:requestheader" part="userId" use="literal"/>
        <soap:header message="tns:requestheader" part="id" use="literal"/>
        <soap:header message="tns:requestheader" part="protocolVersion" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="bodyMassIndex">
      <soap:operation soapAction="" style="document"/>
      <xrd:version>v1</xrd:version>
      <wsdl:input>
        <soap:body use="literal"/>
        <soap:header message="tns:requestheader" part="client" use="literal"/>
        <soap:header message="tns:requestheader" part="service" use="literal"/>
        <soap:header message="tns:requestheader" part="userId" use="literal"/>
        <soap:header message="tns:requestheader" part="id" use="literal"/>
        <soap:header message="tns:requestheader" part="protocolVersion" use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
        <soap:header message="tns:requestheader" part="client" use="literal"/>
        <soap:header message="tns:requestheader" part="service" use="literal"/>
        <soap:header message="tns:requestheader" part="userId" use="literal"/>
        <soap:header message="tns:requestheader" part="id" use="literal"/>
        <soap:header message="tns:requestheader" part="protocolVersion" use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="producerPortService">
    <wsdl:port binding="tns:xroadBinding" name="xroadServicePort">
      <soap:address location="http://foo.bar.baz"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://foo.bar.baz</con:endpoint></con:endpoints><con:operation isOneWay="false" action="" name="bodyMassIndex" bindingOperationName="bodyMassIndex" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="05a93193-4535-4ab2-9cb7-4530f49b0437"><con:settings/><con:call name="bmiRequest" id="e97fc884-0e1e-47a1-8b7c-34da08d5a870"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <soapenv:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000001</id:memberCode>
         <id:subsystemCode>System1</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000000</id:memberCode>
         <id:subsystemCode>Center</id:subsystemCode>
         <id:serviceCode>bodyMassIndex</id:serviceCode>
         <id:serviceVersion>v1</id:serviceVersion>
      </xroad:service>
      <xroad:protocolVersion>4.0</xroad:protocolVersion>
      <xroad:id>6VYUw5JftV11DkzXiUJZgYKculKET1as</xroad:id>
   </soapenv:Header>
   <soapenv:Body>
      <xroad:bodyMassIndex>
         <xroad:request>
            <xroad:height>170</xroad:height>
            <xroad:weight>62</xroad:weight>
         </xroad:request>
      </xroad:bodyMassIndex>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/bodyMassIndexRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="bmiRequestWithRepresentedParty" id="d33e1b52-77a6-4ca7-b60d-cbe2e50e611f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:swi="http://ws-i.org/profiles/basic/1.1/xsd" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
    <SOAP-ENV:Header>
        <xroad:client id:objectType="SUBSYSTEM">
            <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
            <id:memberClass>GOV</id:memberClass>
            <id:memberCode>00000001</id:memberCode>
            <id:subsystemCode>System1</id:subsystemCode>
        </xroad:client>
        <xroad:service id:objectType="SERVICE">
            <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
            <id:memberClass>GOV</id:memberClass>
            <id:memberCode>00000000</id:memberCode>
            <id:subsystemCode>Center</id:subsystemCode>
            <id:serviceCode>bodyMassIndex</id:serviceCode>
            <id:serviceVersion>v1</id:serviceVersion>
        </xroad:service>
        <repr:representedParty>
        </repr:representedParty>
        <xroad:protocolVersion>4.0</xroad:protocolVersion>
        <xroad:id>{message_id_placeholder}</xroad:id>
        <xroad:userId>EE37702211230</xroad:userId>
        <xroad:issue>453465</xroad:issue>
    </SOAP-ENV:Header>
    <SOAP-ENV:Body>
        <xroad:bodyMassIndex>
            <xroad:request>
                <xroad:weight>100</xroad:weight>
                <xroad:height>100</xroad:height>
            </xroad:request>
        </xroad:bodyMassIndex>
    </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/bodyMassIndexRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation isOneWay="false" action="" name="xroadGetRandom" bindingOperationName="xroadGetRandom" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="b8239401-7d62-4c33-9981-f496bdc32d20"><con:settings/><con:call name="xroadGetRandomRequest" id="0f7fbb02-2054-4f80-bf52-eae25118482d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000001</id:memberCode>
         <id:subsystemCode>System1</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000000</id:memberCode>
         <id:subsystemCode>Center</id:subsystemCode>
         <id:serviceCode>xroadGetRandom</id:serviceCode>
         <id:serviceVersion>v1</id:serviceVersion>
      </xroad:service>
     <xroad:protocolVersion>4.0</xroad:protocolVersion>
     <xroad:id>6VYUw5JftV11DkzXiUJZgYKculKET1Dl</xroad:id>
     <xroad:issue>yo</xroad:issue>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xroad:xroadGetRandom>
         <xroad:request>
            <xroad:seed>100</xroad:seed>
         </xroad:request>
      </xroad:xroadGetRandom>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="xroadGetRandomRequestWithRepresentedParty" id="5eeaf763-45cd-4d95-be3e-d859506c795c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000001</id:memberCode>
         <id:subsystemCode>System1</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000000</id:memberCode>
         <id:subsystemCode>Center</id:subsystemCode>
         <id:serviceCode>xroadGetRandom</id:serviceCode>
         <id:serviceVersion>v1</id:serviceVersion>
      </xroad:service>
      <repr:representedParty>
         <repr:partyClass>GOV</repr:partyClass>
         <repr:partyCode>MEMBER3</repr:partyCode>
      </repr:representedParty>
      <xroad:id>1234567890</xroad:id>
      <xroad:protocolVersion>4.0</xroad:protocolVersion>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xroad:xroadGetRandom>
         <xroad:request>
            <xroad:seed>10</xroad:seed>
         </xroad:request>
      </xroad:xroadGetRandom>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="xroadGetRandomFaultRequest"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000001</id:memberCode>
         <id:subsystemCode>System1</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000000</id:memberCode>
         <id:subsystemCode>Center</id:subsystemCode>
         <id:serviceCode>xroadGetRandom</id:serviceCode>
         <id:serviceVersion>v1</id:serviceVersion>
      </xroad:service>
     <xroad:protocolVersion>4.0</xroad:protocolVersion>
     <xroad:id>6VYUw5JftV11DkzXiUJZgYKculKET1Dl</xroad:id>
     <xroad:issue>faultPlease</xroad:issue>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xroad:xroadGetRandom>
         <xroad:request>
            <xroad:seed>100</xroad:seed>
         </xroad:request>
      </xroad:xroadGetRandom>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomRequest"/><con:wsrmConfig version="1.2"/></con:call><con:call name="xroadGetRandomRequestAttachments"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8088/mockService</con:endpoint><con:request><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000001</id:memberCode>
         <id:subsystemCode>System1</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>XTEE-CI-XM</id:xRoadInstance>
         <id:memberClass>GOV</id:memberClass>
         <id:memberCode>00000000</id:memberCode>
         <id:subsystemCode>Center</id:subsystemCode>
         <id:serviceCode>xroadGetRandom</id:serviceCode>
         <id:serviceVersion>v1</id:serviceVersion>
      </xroad:service>
     <xroad:protocolVersion>4.0</xroad:protocolVersion>
     <xroad:id>6VYUw5JftV11DkzXiUJZgYKculKET1Dl</xroad:id>
     <xroad:issue>attachmentsPlease</xroad:issue>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xroad:xroadGetRandom>
         <xroad:request>
            <xroad:seed>100</xroad:seed>
         </xroad:request>
      </xroad:xroadGetRandom>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:mockService port="8088" path="/mockService" host="localhost" name="MockService" bindToHostOnly="false" docroot="" id="01664103-bb05-43e8-affc-3e3f8d1bfd2c"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockService@require-soap-action">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockService@require-soap-version">false</con:setting></con:settings><con:properties/><con:mockOperation name="bodyMassIndex" interface="xroadBinding" operation="bodyMassIndex" id="21ef9272-08cf-42ad-be1e-c5cde5e7f5d3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:response name="bmiResponse" httpResponseStatus="200" encoding="UTF-8" id="536c68ba-b366-4fda-87ce-6d3a1b9e0b22"><con:settings><con:setting id="WsdlSettings@enable-mtom">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@strip-whitespaces">true</con:setting></con:settings><con:script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder(mockRequest.requestContent)

// Copy the header values to the response.

requestContext.clientXRoadInstance = holder.getNodeValue("//xroad:client/id:xRoadInstance")
requestContext.clientMemberClass = holder.getNodeValue("//xroad:client/id:memberClass")
requestContext.clientMemberCode = holder.getNodeValue("//xroad:client/id:memberCode")
requestContext.clientSubsystemCode = holder.getNodeValue("//xroad:client/id:subsystemCode")

requestContext.serviceXRoadInstance = holder.getNodeValue("//xroad:service/id:xRoadInstance")
requestContext.serviceMemberClass = holder.getNodeValue("//xroad:service/id:memberClass")
requestContext.serviceMemberCode = holder.getNodeValue("//xroad:service/id:memberCode")
requestContext.serviceSubsystemCode = holder.getNodeValue("//xroad:service/id:subsystemCode")
requestContext.serviceServiceCode = holder.getNodeValue("//xroad:service/id:serviceCode")
requestContext.serviceServiceVersion = holder.getNodeValue("//xroad:service/id:serviceVersion")

requestContext.messageId = holder.getNodeValue("//xroad:id")
requestContext.protocolVersion = holder.getNodeValue("//xroad:protocolVersion")

requestContext.userId = holder.getNodeValue("//xroad:userId")
requestContext.issue = holder.getNodeValue("//xroad:issue")

// Add child nodes only if parent node exists in request to avoid empty parent node in response in case the request does not contain representedParty
if(holder.getNodeValue("//repr:representedParty") != null){
	def xml = '''&lt;repr:partyClass>${reprPartyClass}&lt;/repr:partyClass>          
				   &lt;repr:partyCode>${reprPartyCode}&lt;/repr:partyCode>
				    '''
	requestContext.representedParty = xml
	requestContext.reprPartyClass = holder.getNodeValue("//repr:representedParty/repr:partyClass")
	requestContext.reprPartyCode = holder.getNodeValue("//repr:representedParty/repr:partyCode")
}

// Calculate the body mass index.

def heightInMeters = holder.getNodeValue("//xroad:height").toInteger() / 100
def weight = holder.getNodeValue("//xroad:weight").toInteger()

requestContext.bodyMassIndex = weight / (heightInMeters * heightInMeters);
</con:script><con:responseContent><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:swi="http://ws-i.org/profiles/basic/1.1/xsd" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>${clientXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${clientMemberClass}</id:memberClass>
         <id:memberCode>${clientMemberCode}</id:memberCode>
         <id:subsystemCode>${clientSubsystemCode}</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>${serviceXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${serviceMemberClass}</id:memberClass>
         <id:memberCode>${serviceMemberCode}</id:memberCode>
         <id:subsystemCode>${serviceSubsystemCode}</id:subsystemCode>
         <id:serviceCode>${serviceServiceCode}</id:serviceCode>
         <id:serviceVersion>${serviceServiceVersion}</id:serviceVersion>
      </xroad:service>
      <repr:representedParty>${representedParty}</repr:representedParty>
      <xroad:userId>${userId}</xroad:userId>
      <xroad:id>${messageId}</xroad:id>
      <xroad:issue>${issue}</xroad:issue>
      <xroad:protocolVersion>${protocolVersion}</xroad:protocolVersion>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xxprod:bodyMassIndexResponse xmlns:xxprod="http://CLIENT1.x-road.ee/producer">
         <request/>
         <response>
            <bodyMassIndex>${bodyMassIndex}</bodyMassIndex>
         </response>
      </xxprod:bodyMassIndexResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/bodyMassIndexResponse"/></con:response><con:dispatchConfig/></con:mockOperation><con:mockOperation name="xroadGetRandom" interface="xroadBinding" operation="xroadGetRandom" id="8811deda-8359-4817-81cd-99f3b9a24247"><con:settings/><con:defaultResponse>xroadGetRandomResponse</con:defaultResponse><con:dispatchStyle>QUERY_MATCH</con:dispatchStyle><con:response name="xroadGetRandomResponse" httpResponseStatus="200" encoding="UTF-8" useWsAddressing="false" id="c9273ec3-9900-4e92-9b37-5d5e0c77ac88"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@remove_empty_content">true</con:setting><con:setting id="WsdlSettings@enable-mtom">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@strip-whitespaces">true</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings><con:script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder(mockRequest.requestContent)

// Copy the header values to the response.

requestContext.clientXRoadInstance = holder.getNodeValue("//xroad:client/id:xRoadInstance")
requestContext.clientMemberClass = holder.getNodeValue("//xroad:client/id:memberClass")
requestContext.clientMemberCode = holder.getNodeValue("//xroad:client/id:memberCode")
requestContext.clientSubsystemCode = holder.getNodeValue("//xroad:client/id:subsystemCode")

requestContext.serviceXRoadInstance = holder.getNodeValue("//xroad:service/id:xRoadInstance")
requestContext.serviceMemberClass = holder.getNodeValue("//xroad:service/id:memberClass")
requestContext.serviceMemberCode = holder.getNodeValue("//xroad:service/id:memberCode")
requestContext.serviceSubsystemCode = holder.getNodeValue("//xroad:service/id:subsystemCode")
requestContext.serviceServiceCode = holder.getNodeValue("//xroad:service/id:serviceCode")
requestContext.serviceServiceVersion = holder.getNodeValue("//xroad:service/id:serviceVersion")

requestContext.messageId = holder.getNodeValue("//xroad:id")
requestContext.protocolVersion = holder.getNodeValue("//xroad:protocolVersion")

requestContext.userId = holder.getNodeValue("//xroad:userId")
requestContext.issue = holder.getNodeValue("//xroad:issue")

// Add child nodes only if parent node exists in request to avoid empty parent node in response in case the request does not contain representedParty
if(holder.getNodeValue("//repr:representedParty") != null){
	def xml = '''&lt;repr:partyClass>${reprPartyClass}&lt;/repr:partyClass>          
				   &lt;repr:partyCode>${reprPartyCode}&lt;/repr:partyCode>
				    '''
	requestContext.representedParty = xml
	requestContext.reprPartyClass = holder.getNodeValue("//repr:representedParty/repr:partyClass")
	requestContext.reprPartyCode = holder.getNodeValue("//repr:representedParty/repr:partyCode")
}

// Calculate a random number in range 1-9 for the result.
requestContext.randomValue = Math.abs(new Random().nextInt() % 9) + 1;
</con:script><con:responseContent><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>${clientXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${clientMemberClass}</id:memberClass>
         <id:memberCode>${clientMemberCode}</id:memberCode>
         <id:subsystemCode>${clientSubsystemCode}</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>${serviceXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${serviceMemberClass}</id:memberClass>
         <id:memberCode>${serviceMemberCode}</id:memberCode>
         <id:subsystemCode>${serviceSubsystemCode}</id:subsystemCode>
         <id:serviceCode>${serviceServiceCode}</id:serviceCode>
         <id:serviceVersion>${serviceServiceVersion}</id:serviceVersion>
      </xroad:service>
      <repr:representedParty>${representedParty}</repr:representedParty>
      <xroad:userId>${userId}</xroad:userId>
      <xroad:id>${messageId}</xroad:id>
      <xroad:protocolVersion>${protocolVersion}</xroad:protocolVersion>
      <xroad:issue>${issue}</xroad:issue>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xxprod:xroadGetRandomResponse xmlns:xxprod="http://CLIENT1.x-road.ee/producer">
         <request/>
         <response>
            <content>${randomValue}</content>
         </response>
      </xxprod:xroadGetRandomResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomResponse"/></con:response><con:response name="xroadGetRandomFaultResponse" httpResponseStatus="500" encoding="UTF-8" id="da941b9f-6844-49b1-99fb-8d714e39bb96"><con:settings/><con:responseContent><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
   <SOAP-ENV:Body>
      <SOAP-ENV:Fault>
         <faultcode>foo.bar.testFault</faultcode>
         <faultstring>Anything can happen in life, especially faults</faultstring>
         <faultactor/>
         <detail>
            <faultDetail>foo.bar.baz</faultDetail>
         </detail>
      </SOAP-ENV:Fault>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:responseContent><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomResponse"/></con:response><con:response name="xroadGetRandomAttachmentsResponse" httpResponseStatus="200" encoding="UTF-8"><con:settings><con:setting id="WsdlSettings@enable-mtom">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@force_mtom">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@strip-whitespaces">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@remove_empty_content">true</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.mock.WsdlMockResponse@disable-multipart-attachments">true</con:setting></con:settings><con:script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder(mockRequest.requestContent)

// Copy the header values to the response.

requestContext.clientXRoadInstance = holder.getNodeValue("//xroad:client/id:xRoadInstance")
requestContext.clientMemberClass = holder.getNodeValue("//xroad:client/id:memberClass")
requestContext.clientMemberCode = holder.getNodeValue("//xroad:client/id:memberCode")
requestContext.clientSubsystemCode = holder.getNodeValue("//xroad:client/id:subsystemCode")

requestContext.serviceXRoadInstance = holder.getNodeValue("//xroad:service/id:xRoadInstance")
requestContext.serviceMemberClass = holder.getNodeValue("//xroad:service/id:memberClass")
requestContext.serviceMemberCode = holder.getNodeValue("//xroad:service/id:memberCode")
requestContext.serviceSubsystemCode = holder.getNodeValue("//xroad:service/id:subsystemCode")
requestContext.serviceServiceCode = holder.getNodeValue("//xroad:service/id:serviceCode")
requestContext.serviceServiceVersion = holder.getNodeValue("//xroad:service/id:serviceVersion")

requestContext.messageId = holder.getNodeValue("//xroad:id")
requestContext.protocolVersion = holder.getNodeValue("//xroad:protocolVersion")

requestContext.userId = holder.getNodeValue("//xroad:userId")
requestContext.issue = holder.getNodeValue("//xroad:issue")

// Add child nodes only if parent node exists in request to avoid empty parent node in response in case the request does not contain representedParty
if(holder.getNodeValue("//repr:representedParty") != null){
	def xml = '''&lt;repr:partyClass>${reprPartyClass}&lt;/repr:partyClass>          
				   &lt;repr:partyCode>${reprPartyCode}&lt;/repr:partyCode>
				    '''
	requestContext.representedParty = xml
	requestContext.reprPartyClass = holder.getNodeValue("//repr:representedParty/repr:partyClass")
	requestContext.reprPartyCode = holder.getNodeValue("//repr:representedParty/repr:partyCode")
}

// Calculate a random number in range 1-9 for the result.
requestContext.randomValue = Math.abs(new Random().nextInt() % 9) + 1;
</con:script><con:responseContent><![CDATA[<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:id="http://x-road.eu/xsd/identifiers" xmlns:xroad="http://x-road.eu/xsd/xroad.xsd" xmlns:repr="http://x-road.eu/xsd/representation.xsd">
   <SOAP-ENV:Header>
      <xroad:client id:objectType="SUBSYSTEM">
         <id:xRoadInstance>${clientXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${clientMemberClass}</id:memberClass>
         <id:memberCode>${clientMemberCode}</id:memberCode>
         <id:subsystemCode>${clientSubsystemCode}</id:subsystemCode>
      </xroad:client>
      <xroad:service id:objectType="SERVICE">
         <id:xRoadInstance>${serviceXRoadInstance}</id:xRoadInstance>
         <id:memberClass>${serviceMemberClass}</id:memberClass>
         <id:memberCode>${serviceMemberCode}</id:memberCode>
         <id:subsystemCode>${serviceSubsystemCode}</id:subsystemCode>
         <id:serviceCode>${serviceServiceCode}</id:serviceCode>
         <id:serviceVersion>${serviceServiceVersion}</id:serviceVersion>
      </xroad:service>
      <repr:representedParty>${representedParty}</repr:representedParty>
      <xroad:userId>${userId}</xroad:userId>
      <xroad:id>${messageId}</xroad:id>
      <xroad:protocolVersion>${protocolVersion}</xroad:protocolVersion>
      <xroad:issue>${issue}</xroad:issue>
   </SOAP-ENV:Header>
   <SOAP-ENV:Body>
      <xxprod:xroadGetRandomResponse xmlns:xxprod="http://CLIENT1.x-road.ee/producer">
         <request/>
         <response>
            <content>${randomValue}</content>
         </response>
      </xxprod:xroadGetRandomResponse>
   </SOAP-ENV:Body>
</SOAP-ENV:Envelope>]]></con:responseContent><con:attachment><con:name>data1.txt</con:name><con:contentType>text/plain</con:contentType><con:size>17</con:size><con:contentId>data1.txt</con:contentId><con:url>/foo/bar/data1.txt</con:url><con:data>UEsDBBQACAgIAIx8akkAAAAAAAAAAAAAAAAJAAAAZGF0YTEudHh0K87PTVVISSxJVCjJVyhOzUsBAFBLBwgXXOsdEwAAABEAAABQSwECFAAUAAgICACMfGpJF1zrHRMAAAARAAAACQAAAAAAAAAAAAAAAAAAAAAAZGF0YTEudHh0UEsFBgAAAAABAAEANwAAAEoAAAAAAA==</con:data><con:id>7739d1d0-09eb-42e3-928e-d7f90ce912cd</con:id></con:attachment><con:attachment><con:name>data2.txt</con:name><con:contentType>text/plain</con:contentType><con:size>22</con:size><con:contentId>data2.txt</con:contentId><con:url>/foo/bar/data2.txt</con:url><con:data>UEsDBBQACAgIAJJ8akkAAAAAAAAAAAAAAAAJAAAAZGF0YTIudHh0K87PTVXIzS9KVUhJLElUKMlXKE7NSwEAUEsHCHfJxVYYAAAAFgAAAFBLAQIUABQACAgIAJJ8akl3ycVWGAAAABYAAAAJAAAAAAAAAAAAAAAAAAAAAABkYXRhMi50eHRQSwUGAAAAAAEAAQA3AAAATwAAAAAA</con:data><con:id>528af7a0-2030-4a20-8e1e-1c14a2fe0b9d</con:id></con:attachment><con:attachment><con:name>data3.txt</con:name><con:contentType>text/plain</con:contentType><con:size>9</con:size><con:contentId>data3.txt</con:contentId><con:url>/foo/bar/data3.txt</con:url><con:data>UEsDBBQACAgIAJV8akkAAAAAAAAAAAAAAAAJAAAAZGF0YTMudHh0y80vSlVISSxJBABQSwcI2pxWLAsAAAAJAAAAUEsBAhQAFAAICAgAlXxqSdqcViwLAAAACQAAAAkAAAAAAAAAAAAAAAAAAAAAAGRhdGEzLnR4dFBLBQYAAAAAAQABADcAAABCAAAAAAA=</con:data><con:id>fe38927b-1f67-4975-963f-55f88b5e1c88</con:id></con:attachment><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://producer.x-road.eu/xroadPortType/xroadGetRandomResponse"/></con:response><con:dispatchConfig xsi:type="con:MockOperationQueryMatchDispatch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:query><con:name>fault</con:name><con:query>declare namespace repr='http://x-road.eu/xsd/representation.xsd';
declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xroad='http://x-road.eu/xsd/xroad.xsd';
declare namespace id='http://x-road.eu/xsd/identifiers';
//xroad:issue


</con:query><con:match>faultPlease</con:match><con:response>xroadGetRandomFaultResponse</con:response></con:query><con:query><con:name>attachments</con:name><con:query>declare namespace repr='http://x-road.eu/xsd/representation.xsd';
declare namespace SOAP-ENV='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace xroad='http://x-road.eu/xsd/xroad.xsd';
declare namespace id='http://x-road.eu/xsd/identifiers';
//xroad:issue</con:query><con:match>attachmentsPlease</con:match><con:response>xroadGetRandomAttachmentsResponse</con:response></con:query></con:dispatchConfig></con:mockOperation></con:mockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:sensitiveInformation/></con:soapui-project>