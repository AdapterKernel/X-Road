subprojects {
    // Indicates whether to measure code coverage when running unit tests
    ext.codeCoverage = false

    apply plugin: 'eclipse'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'

    group = 'ee.cyber.sdsb'
    version = '1.0'

    repositories {
        mavenCentral()
        mavenLocal()

        // XXX In case mavenCentral is unreachable, use this mirror instead
        // maven {
        //     url "http://mirrors.ibiblio.org/pub/mirrors/maven2"
        // }

        // iaikPkcs11Wrapper is located there
        //maven {
        //    url "http://ground.zero.ee/maven2"
        //}
    }

    configurations {
        emma
        provided
    }
    
    dependencies {
        testCompile 'junit:junit:4.11'
        
        provided 'org.projectlombok:lombok:0.12.0'
        
        emma 'emma:emma:2.1.5320'
        emma 'emma:emma_ant:2.1.5320'
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.withType(Compile) {
        options.encoding = "UTF-8"
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }

    tasks.withType(JavaExec) {
        if (project.hasProperty("args")) {
            args = project.getProperty("args").tokenize()
        }
    }

    task buildall(dependsOn: [build, ':proxy-ui:warble', ':center-ui:warble', ':center-service:warble']) {
        description = "Builds all that can be built (even the slow tasks)"
    }

    artifacts {
        archives sourcesJar
    }
    
    sourceSets.main.compileClasspath += configurations.provided
    sourceSets.test.compileClasspath += configurations.provided
    
    eclipse {
        classpath {
            plusConfigurations += configurations.provided 
        }
    }   
    
    afterEvaluate { Project project ->
        if (project.codeCoverage) {
            test {
                // add EMMA related JVM args to our tests
                jvmArgs "-XX:-UseSplitVerifier", 
                        "-Demma.coverage.out.file=$buildDir/tmp/emma/metadata.emma", 
                        "-Demma.coverage.out.merge=true"

                doFirst {
                   // define the custom EMMA ant tasks
                   ant.taskdef(resource: "emma_ant.properties", classpath: configurations.emma.asPath)
             
                   ant.path(id: "run.classpath") {
                      pathelement(location: sourceSets.main.output.classesDir.absolutePath)
                   }

                   def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma/instr")
                   emmaInstDir.mkdirs()

                   // instruct our compiled classes and store them at $buildDir/tmp/emma/instr
                   ant.emma(enabled: 'true', verbosity: 'info') {
                       instr(merge: "true",
                           destdir: emmaInstDir.absolutePath,
                           instrpathref: "run.classpath",
                           metadatafile: new File(emmaInstDir, '/metadata.emma').absolutePath) {
                               instrpath {
                                   fileset(dir: sourceSets.main.output.classesDir.absolutePath, includes:"**/*.class")
                               }
                       }
                   }

                   setClasspath(files("$buildDir/tmp/emma/instr") + configurations.emma + getClasspath())
                }

                // The report should be generated directly after the tests are done.
                doLast {
                   def srcDir = sourceSets.main.java.srcDirs.toArray()[0]
                   //println "Creating test coverage reports for classes " + srcDir

                   def emmaInstDir = new File(sourceSets.main.output.classesDir.parentFile.parentFile, "tmp/emma")

                   ant.emma(enabled:"true") {
                      new File("$buildDir/reports/emma").mkdirs()
                      report(sourcepath: srcDir) {
                         fileset(dir: emmaInstDir.absolutePath) {
                            include(name: "**/*.emma")
                         }
                         html(outfile: "$buildDir/reports/emma/coverage.html", encoding: "UTF-8")
                      }
                   }

                   //println "Test coverage reports available at $buildDir/reports/emma."
                }
            }
        }
    }
}

apply plugin: 'idea'
