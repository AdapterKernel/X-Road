<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd">
    <changeSet author="toja" id="3-history">

        <createTable tableName="history">
            <column name="ID" type="BIGSERIAL">
                <constraints nullable="false"/>
            </column>
            <column name="OPERATION" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="TABLE_NAME" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="RECORD_ID" type="BIGINT">
                <constraints nullable="false"/>
            </column>
            <column name="FIELD_NAME" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="OLD_VALUE" type="TEXT">
            </column>
            <column name="NEW_VALUE" type="TEXT">
            </column>
            <column name="USER_NAME" type="VARCHAR(255)">
                <constraints nullable="false"/>
            </column>
            <column name="TIMESTAMP" type="TIMESTAMP">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addPrimaryKey columnNames="ID" tableName="history" />

        <sql splitStatements="false">
<!-- Wrap the SQL in CDATA in order not to mess up the XML. -->
<!-- XXX Seems that Hibernate mappings don't support ID fields for many-to-many
     relationships so we define these at the database level. -->
<![CDATA[
ALTER TABLE client_iscerts ADD COLUMN id BIGSERIAL UNIQUE;
ALTER TABLE service_securitycategories ADD COLUMN id BIGSERIAL UNIQUE;

DO $$
BEGIN
  CREATE TYPE changed_field_type AS (field_key text, field_value text);
EXCEPTION WHEN duplicate_object THEN
  -- The type already exists.
END $$
LANGUAGE plpgsql;

-- Insert a single row to the history table.
CREATE OR REPLACE FUNCTION insert_history_row(
  user_name text, operation text, table_name text,
  field_data changed_field_type, old_data hstore, new_data hstore, record_id bigint)
RETURNS void AS $body$

DECLARE
  _history_row history;

BEGIN

  _history_row = ROW(
    NEXTVAL('history_id_seq'),
    operation, table_name, record_id, 
    field_data.field_key, -- name of the field that was changed
    NULL, -- old value
    NULL, -- new value
    user_name,
    statement_timestamp()
  );

  IF (operation = 'UPDATE') THEN
    _history_row.old_value = old_data -> field_data.field_key;
    _history_row.new_value = field_data.field_value;
  ELSIF (operation = 'DELETE') THEN
    _history_row.old_value = old_data -> field_data.field_key;
  ELSIF (operation = 'INSERT') THEN
    _history_row.new_value = field_data.field_value;
  END IF;

  INSERT INTO history VALUES (_history_row.*);
END;
$body$
LANGUAGE 'plpgsql';

-- Trigger function for inserting rows to the history table for each INSERT,
-- UPDATE and DELETE operation on the tables that have this trigger set.
CREATE OR REPLACE FUNCTION add_history_rows() RETURNS TRIGGER AS $body$

DECLARE
  _record_id bigint;
  _old_data hstore;
  _new_data hstore;
  _changed_fields hstore;
  _field_data changed_field_type;
  _user_name text;
  _operation text;

BEGIN
  IF TG_WHEN <> 'AFTER' THEN
    RAISE EXCEPTION 'add_history_rows() may only be used as an AFTER trigger';
  END IF;

  IF TG_LEVEL <> 'ROW' THEN
    RAISE EXCEPTION 'add_history_rows() may only be used as a row-level trigger';
  END IF;

  _operation := TG_OP::text;

  -- Detect the type of operation, the changed fields and the ID of the changed record.
  IF (_operation = 'UPDATE') THEN
    _changed_fields := (hstore(NEW.*) - hstore(OLD.*));
    IF _changed_fields = hstore('') THEN
      -- There are no changes to record in the history table.
      RETURN NULL;
    END IF;
    _old_data := hstore(OLD.*);
    _new_data := hstore(NEW.*);
    _record_id := OLD.id;
  ELSIF (_operation = 'DELETE') THEN
    _changed_fields := hstore(OLD.*);
    _old_data := _changed_fields;
    _record_id := OLD.id;
  ELSIF (_operation = 'INSERT') THEN
    _changed_fields := hstore(NEW.*);
    _new_data := _changed_fields;
    _record_id := NEW.id;
  ELSE
    RAISE EXCEPTION 'add_history_rows() supports only INSERT, UPDATE and DELETE';
  END IF;

  -- Detect the name of the user if present.
  BEGIN
    _user_name := current_setting('xroad.user_name');
  EXCEPTION WHEN undefined_object THEN
    _user_name := session_user::text;
  END;

  -- Fill and insert a history record for each changed field.
  FOR _field_data IN SELECT kv."key", kv."value" FROM each(_changed_fields) kv
  LOOP
    PERFORM insert_history_row(
      _user_name, _operation, TG_TABLE_NAME::text,
    _field_data, _old_data, _new_data, _record_id);
  END LOOP;

  RETURN NULL;
END;
$body$
LANGUAGE 'plpgsql';

DROP TRIGGER IF EXISTS update_history ON acl;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON acl
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON authorizedsubject;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON authorizedsubject
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON certificate;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON certificate
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON client;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON client
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON client_iscerts;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON client_iscerts
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON groupmember;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON groupmember
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON identifier;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON identifier
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON localgroup;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON localgroup
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON serverconf;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON serverconf
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON service;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON service
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON service_securitycategories;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON service_securitycategories
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON tsp;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON tsp
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON uiuser;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON uiuser
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();

DROP TRIGGER IF EXISTS update_history ON wsdl;
CREATE TRIGGER update_history AFTER INSERT OR UPDATE OR DELETE ON wsdl
    FOR EACH ROW EXECUTE PROCEDURE add_history_rows();
]]>
        </sql>

        <rollback>
<![CDATA[
DROP TRIGGER IF EXISTS update_history ON acl;
DROP TRIGGER IF EXISTS update_history ON authorizedsubject;
DROP TRIGGER IF EXISTS update_history ON certificate;
DROP TRIGGER IF EXISTS update_history ON client;
DROP TRIGGER IF EXISTS update_history ON client_iscerts;
DROP TRIGGER IF EXISTS update_history ON groupmember;
DROP TRIGGER IF EXISTS update_history ON identifier;
DROP TRIGGER IF EXISTS update_history ON localgroup;
DROP TRIGGER IF EXISTS update_history ON serverconf;
DROP TRIGGER IF EXISTS update_history ON service;
DROP TRIGGER IF EXISTS update_history ON service_securitycategories;
DROP TRIGGER IF EXISTS update_history ON tsp;
DROP TRIGGER IF EXISTS update_history ON uiuser;
DROP TRIGGER IF EXISTS update_history ON wsdl;

ALTER TABLE client_iscerts DROP COLUMN id;
ALTER TABLE service_securitycategories DROP COLUMN id;

DROP FUNCTION IF EXISTS add_history_rows();
DROP FUNCTION IF EXISTS insert_history_row(
    user_name text, operation text, table_name text,
    field_data changed_field_type, old_data hstore, new_data hstore, record_id bigint);
DROP TYPE changed_field_type;
DROP TABLE history;
]]>
        </rollback>
    </changeSet>
</databaseChangeLog>
