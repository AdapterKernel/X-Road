plugins {
    id "eu.appsatori.fatjar" version "0.3"
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }

    //testsuite {
    //    java {
    //        compileClasspath += main.output
    //        runtimeClasspath += main.output
    //    }
    //}
}

dependencies {
    compile project(':common-verifier')
    compile project(':signer-protocol')

    // Necessary since there are jars with no adequate Maven dependencies
    compile fileTree(dir: '../libs', include: '*.jar')

    testCompile project(':common-test')
    testCompile project(':common-verifier').sourceSets.test.output
    testCompile 'com.typesafe.akka:akka-testkit_2.11:2.4.1'

    xjc 'com.sun.xml.bind:jaxb-impl:2.2.6'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.6'

    //testsuiteCompile project(':common-test')
}

//configurations {
//    testsuiteCompile.extendsFrom testCompile
//    testsuiteRuntime.extendsFrom testRuntime
//}

fatJarPrepareFiles {
    include '*'
}

fatJar {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    manifest {
        attributes 'Main-Class': 'ee.ria.xroad.signer.SignerMain'
    }

    from rootProject.file('LICENSE.info')
}

jar.enabled = false
build.dependsOn fatJar
buildall.dependsOn fatJar

task createDirs () {
    project.ext.schemaTargetDir.mkdirs()
}

task xjc () {
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)

    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.ria.xroad.common.conf.keyconf',
        schema: 'src/main/resources/keyconf.xsd',
        binding: '../common-util/src/main/resources/identifiers-bindings.xml'
    )
}

// XXX For running several instances side-by-side, do not use the gradle task --
// gradle cannot handle parallel runs if each task invokes a long-running server process.
// Instead, use the .jar in the build/libs directory:
// java -Djava.library.path=/home/iks2/core/passwordstore -jar signer-1.0.jar
task runSignerMain(type: JavaExec) {
    jvmArgs '-Dxroad.signer.key-configuration-file=build/tmp/keyconf.xml',
        '-Dxroad.common.device-configuration-file=src/test/resources/devices.ini',
        '-Dxroad.common.configuration-path=../common-util/src/test/resources/globalconf_good',
        '-Dxroad.common.temp-files-path=build/tmp/',
        '-Dxroad.proxy.configuration-anchor-file=../common-util/src/test/resources/configuration-anchor1.xml',
        '-Dlogback.configurationFile=src/test/resources/logback-signer.xml',
        '-Djava.library.path=../passwordstore:../libs',
        '-Dxroad.signer.moduleManagerImpl=ee.ria.xroad.signer.tokenmanager.module.HardwareModuleManagerImpl'
    main = 'ee.ria.xroad.signer.SignerMain'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files('../addons/hwtoken/build/libs/hwtoken-1.0.jar')

    description = "Starts signer main program.\nNote: " +
       "Be sure that appropriate libpkcs11wrapper.so is installed to the " +
       "directory\n{JAVA_HOME}/jre/lib/i386 (analogous directory for 64-bit " +
       "OS). Otherwise use\nnext property to detemine your library path:\n" +
       "jvmArgs '-Djava.library.path=/foo/bar/iaik/bin/unix/linux-x86/release'";
}

//task runSignerTestsuite(type: Test){
//    include '**/SignerTestSuite.class' // for doing only testsuite
//    description = "Run Signer test suite."
//    testClassesDir = project.sourceSets.testsuite.output.classesDir
//    classpath = project.sourceSets.testsuite.runtimeClasspath
//}

xjc.dependsOn createDirs
compileJava.dependsOn xjc

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}
