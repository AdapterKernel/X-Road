plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

sourceSets {
    main {
        java.srcDirs = ["src/main/java", "$buildDir/generated-sources"]
        resources.srcDirs = ['src/main/resources', '../../../common-util/src/main/resources']
    }
}

dependencies {
    compile project(':common-util')
    compile project(':proxy')
    compile project(':monitor-common')
    compile project(':monitoring-conf')
    compile project(':addons:proxymonitor:common')
    compile 'com.google.guava:guava:19.0'

    testCompile project (path: ":proxy", configuration: 'testArtifacts')
    testCompile project(':common-test')
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'com.github.stefanbirkner:system-rules:1.16.0'
    testCompile 'com.typesafe.akka:akka-testkit_2.11:2.4.1'
}

task createDirs() {
    project.ext.schemaTargetDir.mkdirs()
}

task licenseFormatJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
}

task licenseTestJava(type:nl.javadude.gradle.plugins.license.License) {
    source = fileTree('src/main/java')
    check = true
}

licenseFormatMain.enabled = false
licenseMain.enabled = false

licenseFormat.dependsOn licenseFormatJava
licenseTest.dependsOn licenseTestJava

jar {
    enabled = false
}

install {
    enabled = false
}

shadowJar {
    baseName = "proxymonitor-metaservice"
    classifier = ''
    dependencies {
        include(project(':addons:proxymonitor:common'))
        include(project(':monitor-common'))
        include(project(':monitoring-conf'))
    }
}

build.dependsOn shadowJar
buildall.dependsOn shadowJar

compileJava.dependsOn processResources

idea.module {
    excludeDirs -= file(buildDir)
    buildDir.listFiles({ d, f -> f != 'generated-sources' } as FilenameFilter).each { excludeDirs += it }
}


task runProxymonitorMetaserviceTest(type: JavaExec) {

    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug',
                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
    }

    jvmArgs '-Dxroad.proxy.ocspCachePath=build/ocsp-cache',
            '-Dxroad.tempFiles.path=build/attach-tmp',
            '-Dxroad.proxy.configurationFile=../../systemtest/conf/local_test/serverconf_producer.xml',
            '-Dxroad.proxy.jetty-serverproxy-configuration-file=src/test/resources/serverproxy.xml',
            '-Dxroad.proxy.jetty-clientproxy-configuration-file=src/test/resources/clientproxy.xml',
            '-Dlogback.configurationFile=src/test/resources/logback-metaservicetest.xml',
            '-Dxroad.proxy.jetty-ocsp-responder-configuration-file=src/test/resources/ocsp-responder.xml',
            '-Dxroad.proxy.client-connector-so-linger=-1',
            '-Dxroad.proxy.client-httpclient-so-linger=-1',
            '-Dxroad.proxy.server-connector-so-linger=-1',
            '-Dxroad.proxy.serverServiceHandlers=ee.ria.xroad.proxy.serverproxy.ProxyMonitorServiceHandlerImpl'

    main = 'ee.ria.xroad.proxy.testsuite.ProxyTestSuite'
    classpath = sourceSets.test.runtimeClasspath
}
