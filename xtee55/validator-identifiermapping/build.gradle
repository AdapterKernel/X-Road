plugins {
    id "eu.appsatori.fatjar" version "0.3"
}

project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

dependencies {
    // SDSB dependencies
    compile 'ee.cyber.sdsb:common-util:1.0'

    compile 'org.postgresql:postgresql:9.3-1100-jdbc41'

    xjc 'com.sun.xml.bind:jaxb-core:2.2.11'
    xjc 'com.sun.xml.bind:jaxb-impl:2.2.11'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.11'

    testCompile 'ee.cyber.sdsb:common-test:1.0'
}

fatJarPrepareFiles {
    include '*'
}

fatJar {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    manifest {
        attributes 'Main-Class': 'ee.cyber.xroad.validator.identifiermapping.Main'
    }
}

task createDirs () {
    project.ext.schemaTargetDir.mkdirs()
}

task xjc () {
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)

    // Generate classes for identifier-mapper
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.cyber.xroad.validator.identifiermapping',
        schema: "$projectDir/doc/identifier-mapping.xsd",
        binding: "$projectDir/doc/identifiers-bindings.xml"
    ) {
    }
}

jar.enabled = false

xjc.dependsOn createDirs
compileJava.dependsOn xjc
build.dependsOn fatJar
