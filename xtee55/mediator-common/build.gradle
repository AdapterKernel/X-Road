project.ext.schemaTargetDir = new File("$buildDir/generated-sources")

configurations {
    xjc
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources']
    }
}

dependencies {
    // X-Road 6.0 dependencies
    compile 'ee.ria.xroad:common-db:1.0'
    compile 'ee.ria.xroad:serverconf:1.0'

    // Test dependencies
    testCompile 'ee.ria.xroad:common-test:1.0'
    // 'sourceSets' trick seems to help to resolve circular dependencies
    testCompile project(':mediator-common-test').sourceSets.main.output
    testCompile 'org.mockito:mockito-all:1.9.0'

    // Additional 3rd party dependencies
    compile 'org.eclipse.jetty:jetty-server:8.1.7.v20120910'
    compile 'commons-io:commons-io:2.4'
    compile 'org.antlr:ST4:4.0.7'

    xjc 'com.sun.xml.bind:jaxb-impl:2.2.6'
    xjc 'com.sun.xml.bind:jaxb-xjc:2.2.6'
}

task createDirs () {
    project.ext.schemaTargetDir.mkdirs()
}

task xjc () {
    ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.xjc.asPath)

    // Generate classes for identifier-mapper
    ant.xjc(
        destdir: project.ext.schemaTargetDir,
        package: 'ee.cyber.xroad.mediator.identifiermapping',
        schema: 'doc/identifier-mapping.xsd',
        binding: 'doc/identifiers-bindings.xml'
    )
}

task cMake(type: Exec) {
    workingDir 'src/main/c'
    commandLine 'make', 'install'
}

task cMakeClean(type: Exec) {
    workingDir 'src/main/c'
    commandLine 'make', 'clean'
}

xjc.dependsOn createDirs
compileJava.dependsOn xjc

classes.dependsOn cMake
clean.dependsOn cMakeClean

task runXLockTest(type: JavaExec) {
    main = "ee.cyber.xroad.serviceimporter.XLockTest"
    classpath = sourceSets.test.runtimeClasspath
    environment += ["LD_LIBRARY_PATH":"src/main/c"]
}

