buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.2-rc1'
    }
}

apply plugin: 'fatjar'

dependencies {
    compile project(':mediator-common')

    // SDSB dependencies
    compile 'ee.cyber.sdsb:common-util:1.0'
    compile 'ee.cyber.sdsb:signer-protocol:1.0'
    compile 'ee.cyber.sdsb:proxy-ui:1.0'

    // Additional 3rd party dependencies
    compile 'commons-cli:commons-cli:1.2'
}

fatJarPrepareFiles {
    include '*'
}

fatJar {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"

    manifest {
        attributes 'Main-Class': 'ee.cyber.xroad.serviceimporter.Main'
    }
}

jar.enabled = false
build.dependsOn fatJar

task cMake(type: Exec) {
    workingDir 'src/main/c'
    commandLine 'make', 'install'
}

task cMakeClean(type: Exec) {
    workingDir 'src/main/c'
    commandLine 'make', 'clean'
}

classes.dependsOn cMake
clean.dependsOn cMakeClean

task runServiceImporter(type: JavaExec) {
    main = 'ee.cyber.xroad.serviceimporter.Main'
    classpath = sourceSets.main.runtimeClasspath
    environment += ["LD_LIBRARY_PATH":"src/main/c"]
    args '-import'
}

task runServiceExporter(type: JavaExec) {
    main = 'ee.cyber.xroad.serviceimporter.Main'
    classpath = sourceSets.main.runtimeClasspath
    environment += ["LD_LIBRARY_PATH":"src/main/c"]
    args '-export'
}

task runSDSBChecker(type: JavaExec) {
    main = 'ee.cyber.xroad.serviceimporter.Main'
    classpath = sourceSets.main.runtimeClasspath
    environment += ["LD_LIBRARY_PATH":"src/main/c"]
    args '-checksdsb'
}

task runXLockTest(type: JavaExec) {
    main = "ee.cyber.xroad.serviceimporter.XLockTest"
    classpath = sourceSets.test.runtimeClasspath
    environment += ["LD_LIBRARY_PATH":"src/main/c"]
}

task runServiceImporterTest(type: JavaExec) {
    main = 'ee.cyber.xroad.serviceimporter.ServiceImporterTest'
    classpath = sourceSets.test.runtimeClasspath
}
